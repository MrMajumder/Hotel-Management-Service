
CREATE OR REPLACE PROCEDURE CANCEL_RESERV(ID IN NUMBER, MSG OUT NUMBER)
IS
BEGIN
MSG := CAN_RESERV(ID);
END;
/


CREATE OR REPLACE PROCEDURE CANCEL_SERVE(ID IN NUMBER, MSG OUT NUMBER)
IS 
SID NUMBER;
BEGIN
UPDATE ROOM_HB_SERV_RECEIVES SET SERVICE_ACTIVE = 2 WHERE SERVICE_ID = ID AND SERVICE_ACTIVE = 1;

MSG := 0;
EXCEPTION
WHEN NO_DATA_FOUND THEN 
MSG := 7;
END;
/

CREATE OR REPLACE PROCEDURE NEW_COMPLAIN(ID IN NUMBER, COMP IN VARCHAR2)
IS
BEGIN
INSERT INTO COMPLAIN VALUES(COMP_ID.NEXTVAL, ID, COMP, SYSDATE);
END;
/


CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT(ID IN NUMBER, MSG OUT NUMBER)
IS 
BEGIN 
	MSG := DELETE_ACC(ID);
END;
/


CREATE OR REPLACE PROCEDURE EDIT_ACCOUNT(ID IN NUMBER, FNAME IN VARCHAR2, LNAME IN VARCHAR2, PASS IN VARCHAR2, HOU IN VARCHAR2, RO IN VARCHAR2, CI IN VARCHAR2, CO IN VARCHAR2, IDC IN NUMBER, CC IN NUMBER, PASSN IN NUMBER, PH IN VARCHAR2, ROLE IN VARCHAR2) IS
BEGIN
IF FNAME IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET FIRST_NAME = FNAME WHERE USER_ID = ID;
END IF;
IF LNAME IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET LAST_NAME = LNAME WHERE USER_ID = ID;
END IF;
IF PASS IS NOT NULL THEN 
 UPDATE LOG_IN SET LOGIN_PASSWORD = PASS WHERE LOGIN_EMAIL = (SELECT LOGIN_EMAIL FROM ACCOUNT_HOLDER WHERE USER_ID = ID);
END IF;
IF HOU IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET HOUSE_NO = HOU WHERE USER_ID = ID;
END IF;
IF RO IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET ROAD_NO = RO WHERE USER_ID = ID;
END IF;
IF CI IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET CITY = CI WHERE USER_ID = ID;
END IF;
IF CO IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET COUNTRY = CO WHERE USER_ID = ID;
END IF;
IF PH IS NOT NULL THEN 
 DELETE FROM ACCOUNT_HOLDER_PHNUMBER WHERE USER_ID = ID;
END IF;
IF ROLE = 'customer' THEN
	IF IDC IS NOT NULL THEN 
		UPDATE CUSTOMER SET ID_CARD_NO = IDC WHERE USER_ID = ID;
	END IF;
	IF CC IS NOT NULL THEN 
		UPDATE CUSTOMER SET CREDIT_CARD_NO = CC WHERE USER_ID = ID;
	END IF;
	IF PASSN IS NOT NULL THEN 
		UPDATE CUSTOMER SET PASSPORT_NO = PASSN WHERE USER_ID = ID;
	END IF;
END IF;
END;
/
CREATE OR REPLACE PROCEDURE PH_NUMBER_INSERT(ID IN NUMBER, PH IN NUMBER)
IS
BEGIN 
INSERT INTO ACCOUNT_HOLDER_PHNUMBER VALUES(ID, PH);
END;
/


CREATE OR REPLACE PROCEDURE INSERT_ACCOUNTHOLDER(MAIL IN VARCHAR2, FNAME IN VARCHAR2, LNAME IN VARCHAR2, PASS IN VARCHAR2, HOU IN VARCHAR2, RO IN VARCHAR2, CI IN VARCHAR2, CO IN VARCHAR2, ROLE IN VARCHAR2, ID IN NUMBER, CC IN NUMBER, PASSN IN NUMBER, MID IN NUMBER, POS IN VARCHAR2, WORKD IN VARCHAR2, PERM IN VARCHAR2, SAL IN NUMBER, MSG OUT NUMBER) IS
BEGIN
	INSERT INTO LOG_IN VALUES(MAIL, PASS, ROLE);
	INSERT INTO ACCOUNT_HOLDER VALUES(ACHO_ID.NEXTVAL, MAIL, FNAME, LNAME, HOU, RO, CI, CO);
	IF ROLE = 'customer' THEN
		INSERT INTO CUSTOMER VALUES(ACHO_ID.CURRVAL, ID, CC, PASSN);
	ELSE 
		INSERT INTO EMPLOYEE VALUES(ACHO_ID.CURRVAL, MID, POS, WORKD, PERM, SAL, '', 0);
	END IF;
	MSG := 1;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN 
	MSG := 0;
END;
/

CREATE OR REPLACE PROCEDURE NEW_PH_NUMBER_INSERT(PH IN NUMBER)
IS
BEGIN 
INSERT INTO ACCOUNT_HOLDER_PHNUMBER VALUES(ACHO_ID.CURRVAL, PH);
END;
/


CREATE OR REPLACE PROCEDURE UPDATE_SERVER_DATE(MSG OUT NUMBER) IS
BEGIN

	FOR R IN (SELECT RESERVATION_ID FROM RESERVATION WHERE DEPARTURE_DATE = TRUNC(SYSDATE))
	LOOP
		UPDATE ROOM SET RESERVATION_ID = NULL WHERE RESERVATION_ID = R.RESERVATION_ID;
	END LOOP;
	UPDATE RESERVATION SET RESERVATION_ACTIVE = 3 WHERE DEPARTURE_DATE = TRUNC(SYSDATE) AND RESERVATION_ACTIVE = 1;
	FOR R IN (SELECT B.ROOM_ID RMI, B.RESERVATION_ID RSI  FROM BOOKED_ROOMS B, RESERVATION R WHERE R.RESERVATION_ID = B.RESERVATION_ID AND R.ARRIVAL_DATE = TRUNC(SYSDATE) AND R.RESERVATION_ACTIVE = 0)
	LOOP 
		DBMS_OUTPUT.PUT_LINE(R.RSI);
		DBMS_OUTPUT.PUT_LINE(R.RMI);
		UPDATE ROOM SET RESERVATION_ID = R.RSI WHERE ROOM_ID = R.RMI;
	END LOOP;
	UPDATE RESERVATION SET RESERVATION_ACTIVE = 1 WHERE ARRIVAL_DATE = TRUNC(SYSDATE) AND RESERVATION_ACTIVE = 0;
	MSG := 1;
END;
/





CREATE OR REPLACE PROCEDURE NEW_RESERV_ENTRYS(ID IN NUMBER, ADATE IN VARCHAR2, DDATE IN VARCHAR2,NUM IN NUMBER, R_ID IN NUMBER, MSG OUT NUMBER)
IS

	R_CURRENT NUMBER;
	B_CURRENT NUMBER;
	RCOST NUMBER;
	DAYS NUMBER;
 BEGIN
	IF NUM = 0 THEN
		
		INSERT INTO RESERVATION VALUES(RES_ID.NEXTVAL, 1, TO_DATE(ADATE, 'YYYY-MM-DD'), TO_DATE(DDATE, 'YYYY-MM-DD'), 0, ID);
		--HERE RESERVATION ID IS PENDING '0'
		
		SELECT RES_ID.CURRVAL INTO R_CURRENT FROM DUAL;
		
		SELECT RENT INTO RCOST FROM ROOM WHERE ROOM_ID = R_ID;
		SELECT (DEPARTURE_DATE - ARRIVAL_DATE) INTO DAYS FROM RESERVATION WHERE RESERVATION_ID = R_CURRENT;
		INSERT INTO BILL VALUES(BIL_ID.NEXTVAL, DAYS * RCOST, SYSDATE, DEFAULT);
		SELECT BIL_ID.CURRVAL INTO B_CURRENT FROM DUAL;
		INSERT INTO HOTEL_BILL VALUES(B_CURRENT, R_CURRENT, DAYS * RCOST);
		INSERT INTO BOOKED_ROOMS VALUES(R_CURRENT, R_ID, TO_DATE(ADATE, 'YYYY-MM-DD'), TO_DATE(DDATE, 'YYYY-MM-DD'));
		MSG := 1;
	ELSE
		
		SELECT RES_ID.CURRVAL INTO R_CURRENT FROM DUAL;
		
		SELECT (DEPARTURE_DATE - ARRIVAL_DATE) INTO DAYS FROM RESERVATION WHERE RESERVATION_ID = R_CURRENT;
		SELECT RENT INTO RCOST FROM ROOM WHERE ROOM_ID = R_ID;
		SELECT BIL_ID.CURRVAL INTO B_CURRENT FROM DUAL;
		UPDATE BILL SET COST = COST + DAYS * RCOST WHERE BILL_ID = B_CURRENT;
		UPDATE HOTEL_BILL SET DUE = DUE + DAYS * RCOST WHERE BILL_ID = B_CURRENT;
		INSERT INTO BOOKED_ROOMS VALUES(R_CURRENT, R_ID, TO_DATE(ADATE, 'YYYY-MM-DD'), TO_DATE(DDATE, 'YYYY-MM-DD'));
		MSG := 1;
	END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN 
	MSG := 0;
WHEN OTHERS THEN 
	MSG := 0;
END;
/



CREATE OR REPLACE PROCEDURE NEW_EXPENSE_ENTRY(EID IN NUMBER, COST IN NUMBER, ETYPE IN VARCHAR2, EDES IN VARCHAR2, EDATE IN VARCHAR2)
IS
BEGIN 
	INSERT INTO BILL VALUES(BIL_ID.NEXTVAL, COST, TO_DATE(EDATE, 'YYYY-MM-DD'), 0);
	INSERT INTO EXPENSES VALUES(BIL_ID.CURRVAL, EID, ETYPE, EDES);
END;
/

CREATE OR REPLACE PROCEDURE SALARY_PAYMENT(EID IN NUMBER, SALARY IN NUMBER)
IS
BEGIN

END;
/

CREATE OR REPLACE PROCEDURE EMP_PROFILE_EDIT(EID IN NUMBER, SAL IN NUMBER, POS IN VARCHAR2, WORKD IN VARCHAR2)
IS
BEGIN
IF SAL IS NOT NULL THEN
	UPDATE EMPLOYEE SET BASE_SALARY = SAL WHERE USER_ID = EID;
END IF;
IF POS IS NOT NULL THEN
	UPDATE EMPLOYEE SET POSITION = POS WHERE USER_ID = EID;
END IF;
IF WORKD IS NOT NULL THEN
	UPDATE EMPLOYEE SET WORK_DESCRIPTION = WORKD WHERE USER_ID = EID;
END IF;
END;
/

-- BEGIN
-- EMP_PROFILE_EDIT(21, 5500, 'Manager');
-- END;
-- /