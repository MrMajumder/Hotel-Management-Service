



CREATE OR REPLACE PROCEDURE RESERV_ENTRY(GUESTS IN NUMBER, ID IN NUMBER, ADATE IN VARCHAR2, DDATE IN VARCHAR2, RTYPE IN VARCHAR2, MSG OUT NUMBER)
IS

	R_ID NUMBER;
	R_CURRENT NUMBER;
	B_CURRENT NUMBER;
	CAP NUMBER;
 BEGIN
	R_ID := ROOM_SEARCH(RTYPE);
	SELECT CAPACITY INTO CAP FROM ROOM WHERE ROOM_ID = R_ID;
	IF GUESTS > CAP THEN
		MSG := 2;
	ELSE
		INSERT INTO BILL VALUES(BIL_ID.NEXTVAL, (SELECT RENT FROM ROOM WHERE ROOM_ID = R_ID), SYSDATE, DEFAULT);
		INSERT INTO RESERVATION VALUES(RES_ID.NEXTVAL, GUESTS, TO_DATE(ADATE, 'YYYY-MM-DD'), TO_DATE(DDATE, 'YYYY-MM-DD'), DEFAULT, ID);
		SELECT RES_ID.CURRVAL INTO R_CURRENT FROM DUAL;
		SELECT BIL_ID.CURRVAL INTO B_CURRENT FROM DUAL;
		UPDATE ROOM SET RESERVATION_ID = R_CURRENT  WHERE ROOM_ID = R_ID;
		INSERT INTO HOTEL_BILL VALUES(B_CURRENT, R_CURRENT, DEFAULT);
		MSG := 1;
	END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN 
	MSG := 0;
WHEN OTHERS THEN 
	MSG := 0;
END;
/


CREATE OR REPLACE PROCEDURE CANCEL_RESERV(ID IN NUMBER, MSG OUT NUMBER)
IS
HB NUMBER;
BEGIN
DELETE FROM BILL WHERE BILL_ID = (SELECT BILL_ID FROM HOTEL_BILL WHERE RESERVATION_ID = ID);
DELETE FROM RESERVATION WHERE RESERVATION_ID = ID ;
MSG := 1;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
	MSG := 0;
END;
/

-- DECLARE
-- M VARCHAR2(1000);
-- BEGIN
-- CANCEL_RESERV(31, M);
-- DBMS_OUTPUT.PUT_LINE(M);
-- END;
-- /

CREATE OR REPLACE PROCEDURE CANCEL_SERVE(ID IN NUMBER, MSG OUT NUMBER)
IS 
SID NUMBER;
BEGIN
DELETE FROM ROOM_HB_SERV_RECEIVES WHERE SERVICE_ID = ID;

DBMS_OUTPUT.PUT_LINE('HELLO');
MSG := 0;
EXCEPTION
WHEN NO_DATA_FOUND THEN 
MSG := 7;
END;
/

-- DECLARE
-- M VARCHAR2(1000);
-- BEGIN
-- CANCEL_SERVE(1, M);
-- DBMS_OUTPUT.PUT_LINE(M);
-- END;
-- /

CREATE OR REPLACE PROCEDURE NEW_COMPLAIN(ID IN NUMBER, COMP IN VARCHAR2)
IS
BEGIN
INSERT INTO COMPLAIN VALUES(COMP_ID.NEXTVAL, ID, COMP, SYSDATE);
END;
/


CREATE OR REPLACE PROCEDURE DELETE_ACCOUNT(ID IN NUMBER)
IS 
LID VARCHAR2(100);
BEGIN 
SELECT LOGIN_EMAIL INTO LID FROM ACCOUNT_HOLDER WHERE USER_ID = ID;
DELETE FROM LOG_IN WHERE LOGIN_EMAIL = LID;
END;
/


CREATE OR REPLACE PROCEDURE EDIT_ACCOUNT(ID IN NUMBER, FNAME IN VARCHAR2, LNAME IN VARCHAR2, PASS IN VARCHAR2, HOU IN VARCHAR2, RO IN VARCHAR2, CI IN VARCHAR2, CO IN VARCHAR2, IDC IN NUMBER, CC IN NUMBER, PASSN IN NUMBER, ROLE IN VARCHAR2) IS
BEGIN
IF FNAME IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET FIRST_NAME = FNAME WHERE USER_ID = ID;
END IF;
IF LNAME IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET LAST_NAME = LNAME WHERE USER_ID = ID;
END IF;
IF PASS IS NOT NULL THEN 
 UPDATE LOG_IN SET LOGIN_PASSWORD = PASS WHERE LOGIN_EMAIL = (SELECT LOGIN_EMAIL FROM ACCOUNT_HOLDER WHERE USER_ID = ID);
END IF;
IF HOU IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET HOUSE_NO = HOU WHERE USER_ID = ID;
END IF;
IF RO IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET ROAD_NO = RO WHERE USER_ID = ID;
END IF;
IF CI IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET CITY = CI WHERE USER_ID = ID;
END IF;
IF CO IS NOT NULL THEN 
 UPDATE ACCOUNT_HOLDER SET COUNTRY = CO WHERE USER_ID = ID;
END IF;
IF ROLE = 'customer' THEN
	IF IDC IS NOT NULL THEN 
		UPDATE CUSTOMER SET ID_CARD_NO = IDC WHERE USER_ID = ID;
	END IF;
	IF CC IS NOT NULL THEN 
		UPDATE CUSTOMER SET CREDIT_CARD_NO = CC WHERE USER_ID = ID;
	END IF;
	IF PASSN IS NOT NULL THEN 
		UPDATE CUSTOMER SET PASSPORT_NO = PASSN WHERE USER_ID = ID;
	END IF;
END IF;
END;
/

CREATE OR REPLACE PROCEDURE PH_NUMBER_DELETE(ID IN NUMBER)
IS
BEGIN
DELETE FROM ACCOUNT_HOLDER_PHNUMBER WHERE USER_ID = ID;
END;
/

CREATE OR REPLACE PROCEDURE PH_NUMBER_INSERT(ID IN NUMBER, PH IN NUMBER)
IS
BEGIN 
INSERT INTO ACCOUNT_HOLDER_PHNUMBER VALUES(ID, PH);
END;
/


CREATE OR REPLACE PROCEDURE INSERT_ACCOUNTHOLDER(MAIL IN VARCHAR2, FNAME IN VARCHAR2, LNAME IN VARCHAR2, PASS IN VARCHAR2, HOU IN VARCHAR2, RO IN VARCHAR2, CI IN VARCHAR2, CO IN VARCHAR2, ROLE IN VARCHAR2, MSG OUT NUMBER) IS
BEGIN
	INSERT INTO LOG_IN VALUES(MAIL, PASS, ROLE);
	INSERT INTO ACCOUNT_HOLDER VALUES(ACHO_ID.NEXTVAL, MAIL, FNAME, LNAME, HOU, RO, CI, CO);
	MSG := 1;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN 
	MSG := 0;
END;
/

CREATE OR REPLACE PROCEDURE INSERT_EMPLOYEE(ID IN NUMBER, POS IN VARCHAR2, WORKD IN VARCHAR2, PERM IN VARCHAR2, SAL IN NUMBER)
IS
BEGIN
	INSERT INTO EMPLOYEE VALUES(ACHO_ID.CURRVAL, ID, POS, WORKD, PERM, SAL, '', 0);
	
END;
/


CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(ID IN NUMBER, CC IN NUMBER, PASSN IN NUMBER)
IS
BEGIN
	INSERT INTO CUSTOMER VALUES(ACHO_ID.CURRVAL, ID, CC, PASSN);
		 
END;
/

CREATE OR REPLACE PROCEDURE NEW_PH_NUMBER_INSERT(PH IN NUMBER)
IS
BEGIN 
INSERT INTO ACCOUNT_HOLDER_PHNUMBER VALUES(ACHO_ID.CURRVAL, PH);
END;
/




-- DECLARE
-- LID VARCHAR2(100);
-- BEGIN 
-- SELECT LOGIN_EMAIL INTO LID FROM ACCOUNT_HOLDER WHERE USER_ID = 1012;
-- DELETE FROM LOG_IN WHERE LOGIN_EMAIL = LID;
-- END;
-- /
-- 

-- DECLARE
-- ID NUMBER;
-- CD NUMBER;
-- BEGIN
-- INSERT INTO ROOM VALUES(4, 1, 1, 4, 1, 2, 5000, NULL, 'Family Suit');
-- EXCEPTION
-- WHEN DUP_VAL_ON_INDEX THEN 
-- DBMS_OUTPUT.PUT_LINE('DUPLICATE VALUES');
-- END;
-- 
-- /
-- DELETE FROM BILL ;
-- DELETE FROM RESERVATION;
-- DELETE FROM HOTEL_BILL;
-- DELETE FROM ROOM ;
-- 